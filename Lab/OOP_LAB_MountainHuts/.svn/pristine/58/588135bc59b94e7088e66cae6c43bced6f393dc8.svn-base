package mountainhuts;

import static java.util.stream.Collectors.toList;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.TreeMap;

import static java.util.stream.Collectors.*;

public class Region {

	private String name;
	private List<Altitude> alt;
	private HashMap<String, Municipality> municipality = new HashMap<>();
	private HashMap<String, MountainHut> mountainhut = new HashMap<>();
	
	/**
	 * Create a region with the given name.
	 * 
	 * @param name
	 *            the name of the region
	 */
	public Region(String name, String file) {
		this.name = name;
		readData(file);
		alt = new ArrayList<>();  
	}

	/**
	 * Return the name of the region.
	 * 
	 * @return the name of the region
	 */
	public String getName() {
		return name;
	}

	/**
	 * Create the ranges given their textual representation in the format
	 * "[minValue]-[maxValue]".
	 * 
	 * @param ranges
	 *            an array of textual ranges
	 */
	public void setAltitudeRanges(String... ranges) {
		Integer min;
		Integer max;
		for (String s: ranges) {
			String[] split = s.split("-");
			min = Integer.valueOf(split[0]);
			max = Integer.valueOf(split[1]);
			this.alt.add(new Altitude(min, max));
		}
	}

	/**
	 * Return the textual representation in the format "[minValue]-[maxValue]" of
	 * the range including the given altitude or return the default range "0-INF".
	 * 
	 * @param altitude
	 *            the geographical altitude
	 * @return a string representing the range
	 */
	public String getAltitudeRange(Integer altitude) {
		for(Altitude alt: this.alt) {
			if (alt.isHere(altitude)) {
				return alt.getStringRange();
			}
		}
		return "0-INF";
	}

	/**
	 * Return all the municipalities available.
	 * 
	 * @return a collection of municipalities
	 */
	public Collection<Municipality> getMunicipalities() {
		return municipality.values();
	}

	/**
	 * Return all the mountain huts available.
	 * 
	 * @return a collection of mountain huts
	 */
	public Collection<MountainHut> getMountainHuts() {
		return mountainhut.values();
	}

	/**
	 * Create a new municipality if it is not already available or find it.
	 * Duplicates must be detected by comparing the municipality names.
	 * 
	 * @param name
	 *            the municipality name
	 * @param province
	 *            the municipality province
	 * @param altitude
	 *            the municipality altitude
	 * @return the municipality
	 */
	public Municipality createOrGetMunicipality(String name, String province, Integer altitude) {
		if (!municipality.containsKey(name)) {
			Municipality mun = new Municipality(name, province, altitude);
			this.municipality.put(name, mun);
		}
		return municipality.get(name);
	}

	/**
	 * Create a new mountain hut if it is not already available or find it.
	 * Duplicates must be detected by comparing the mountain hut names.
	 *
	 * @param name
	 *            the mountain hut name
	 * @param category
	 *            the mountain hut category
	 * @param bedsNumber
	 *            the number of beds in the mountain hut
	 * @param municipality
	 *            the municipality in which the mountain hut is located
	 * @return the mountain hut
	 */
	public MountainHut createOrGetMountainHut(String name, String category, Integer bedsNumber, Municipality municipality) {
		if (!mountainhut.containsKey(name)) {
			MountainHut mon = new MountainHut(name, category, bedsNumber, municipality);
			this.mountainhut.put(name, mon);
		}
		return mountainhut.get(name);
	}

	/**
	 * Create a new mountain hut if it is not already available or find it.
	 * Duplicates must be detected by comparing the mountain hut names.
	 * 
	 * @param name
	 *            the mountain hut name
	 * @param altitude
	 *            the mountain hut altitude
	 * @param category
	 *            the mountain hut category
	 * @param bedsNumber
	 *            the number of beds in the mountain hut
	 * @param municipality
	 *            the municipality in which the mountain hut is located
	 * @return a mountain hut
	 */
	public MountainHut createOrGetMountainHut(String name, Integer altitude, String category, Integer bedsNumber, Municipality municipality) {
		if (!mountainhut.containsKey(name)) {
			MountainHut mon = new MountainHut(name, altitude, category, bedsNumber, municipality);
			this.mountainhut.put(name, mon);
		}
		return mountainhut.get(name);
	}

	/**
	 * Creates a new region and loads its data from a file.
	 * 
	 * The file must be a CSV file and it must contain the following fields:
	 * <ul>
	 * <li>{@code "Province"},
	 * <li>{@code "Municipality"},
	 * <li>{@code "MunicipalityAltitude"},
	 * <li>{@code "Name"},
	 * <li>{@code "Altitude"},
	 * <li>{@code "Category"},
	 * <li>{@code "BedsNumber"}
	 * </ul>
	 * 
	 * The fields are separated by a semicolon (';'). The field {@code "Altitude"}
	 * may be empty.
	 * 
	 * @param name
	 *            the name of the region
	 * @param file
	 *            the path of the file
	 */
	public static Region fromFile(String name, String file) {
		return new Region(name, file);
	}

	@SuppressWarnings("unused")
	private void readData(String file) {
		List<String> lines = null;
		Municipality mun;
		MountainHut mon;

		try (BufferedReader in = new BufferedReader(new FileReader(file))) {
			lines = in.lines().collect(toList());
		} catch (IOException e) {
			System.err.println(e.getMessage());
		}

		if (lines == null)
			return;
		lines.remove(0);
		
		// Continue the implementation here
		for (String s: lines) {
			String[] split = s.split(";");
			mun = createOrGetMunicipality(split[1], split[0], Integer.valueOf(split[2]));
			if(split[4].isEmpty()) {
				mon = createOrGetMountainHut(
						split[3], split[5], Integer.valueOf(split[6]), mun);
				mun.increaseHut();
			}
			else {
				mon = createOrGetMountainHut(
						split[3], Integer.valueOf(split[4]), split[5], Integer.valueOf(split[6]), mun);
				mun.increaseHut();
			}
		}
		
	}

	/**
	 * Count the number of municipalities with at least a mountain hut per each
	 * province.
	 * 
	 * @return a map with the province as key and the number of municipalities as
	 *         value
	 */
	public Map<String, Long> countMunicipalitiesPerProvince() {
		return municipality.values().stream().
				collect(groupingBy(
						Municipality::getProvince, 
						counting()));
	}

	/**
	 * Count the number of mountain huts per each municipality within each province.
	 * 
	 * @return a map with the province as key and, as value, a map with the
	 *         municipality as key and the number of mountain huts as value
	 */
	public Map<String, Map<String, Long>> countMountainHutsPerMunicipalityPerProvince() {
		return mountainhut.values().stream()
				.collect(
						groupingBy(
								MountainHut::getProvince, 
								groupingBy(
										MountainHut::getMunicipalityName,
										counting())
						));
	}
	
	/**
	 * Count the number of mountain huts per altitude range. If the altitude of the
	 * mountain hut is not available, use the altitude of its municipality.
	 * 
	 * @return a map with the altitude range as key and the number of mountain huts
	 *         as value
	 */
	public Map<String, Long> countMountainHutsPerAltitudeRange() {
		Map<String, Long> m = mountainhut.values().stream()
				.map( x -> getAltitudeRange(
						x.getAltitude().isPresent() ? 
								x.getAltitude().get()  
							: 
								x.getMunicipality().getAltitude()
						))
				.collect(groupingBy(
						x -> x,
						TreeMap::new,
						counting()
				));
		return m ;
	}

	/**
	 * Compute the total number of beds available in the mountain huts per each
	 * province.
	 * 
	 * @return a map with the province as key and the total number of beds as value
	 */
	public Map<String, Integer> totalBedsNumberPerProvince() {
		return mountainhut.values().stream().
				collect(groupingBy(
						MountainHut::getProvince,
						summingInt(MountainHut::getBedsNumber)));
	}

	/**
	 * Compute the maximum number of beds available in a single mountain hut per
	 * altitude range. If the altitude of the mountain hut is not available, use the
	 * altitude of its municipality.
	 * 
	 * @return a map with the altitude range as key and the maximum number of beds
	 *         as value
	 */
	public Map<String, Optional<Integer>> maximumBedsNumberPerAltitudeRange() {
		return mountainhut.values()
				.stream()
				.collect(
					groupingBy(
							x -> getAltitudeRange(
									x.getAltitude().isPresent() ?
											x.getAltitude().get()
										:
											x.getMunicipality().getAltitude()
									),						
						mapping(
									MountainHut::getBedsNumber,
									maxBy(Comparator.naturalOrder())
							)));
	};

	/**
	 * Compute the municipality names per number of mountain huts in a municipality.
	 * The lists of municipality names must be in alphabetical order.
	 * 
	 * @return a map with the number of mountain huts in a municipality as key and a
	 *         list of municipality names as value
	 */
	public Map<Long, List<String>> municipalityNamesPerCountOfMountainHuts() {
		Map<Long, List<String>> m = municipality.values().stream()
				.collect(
						groupingBy(
								Municipality::getnHut,
								mapping(Municipality::getName, toList())
						));
		
		Map<Long, List<String>> mSorted = new HashMap<Long, List<String>>();
		for (Map.Entry<Long, List<String>> entry : m.entrySet()) {				//ordina anche lista m
			List<String> sort = entry.getValue();
			sort.sort(Comparator.naturalOrder());
			mSorted.put(entry.getKey(), sort);
		}
		
		return mSorted;
	}

}
